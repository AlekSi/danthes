{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Danthes","google":"","body":"# d'Anthès [![Build Status](https://secure.travis-ci.org/phenomena/danthes.png?branch=master)](http://travis-ci.org/phenomena/danthes)\r\n\r\nd'Anthès is a Ruby gem for use with Rails to publish and subscribe to messages through [Faye](http://faye.jcoglan.com/). It allows you to easily provide real-time updates through an open socket without tying up a Rails process. All channels are private so users can only listen to events you subscribe them to. Based on PrivatePub gem.\r\n\r\n## Setup\r\n\r\nAdd the gem to your Gemfile and run the `bundle` command to install it.\r\n\r\n```ruby\r\ngem 'danthes'\r\n```\r\n\r\nRun the generator to create the initial files.\r\n\r\n```\r\nrails g danthes:install\r\n```\r\n\r\nNext, start up Faye using the rackup file that was generated.\r\n\r\n```\r\nrackup danthes.ru -s thin -E production\r\n```\r\n\r\n**In Rails 3.1** add the JavaScript file to your application.js file manifest.\r\n\r\n```javascript\r\n//= require danthes\r\n```\r\n\r\n\r\nIt's not necessary to include faye's connect.js since that will be handled automatically for you.\r\n\r\n## Serving Faye over HTTPS (with Thin)\r\n\r\nTo serve Faye over HTTPS you could create a thin configuration file `config/private_pub_thin.yml` similar to the following:\r\n\r\n```yaml\r\n---\r\nport: 4443\r\nssl: true\r\nssl_key_file: /path/to/server.pem\r\nssl_cert_file: /path/to/certificate_chain.pem\r\nenvironment: production\r\nrackup: danthes.ru\r\n```\r\n\r\nThe `certificate_chain.pem` file should contain your signed certificate, followed by intermediate certificates (if any) and the root certificate of the CA that signed the key.\r\n\r\nNext reconfigure the URL in `config/danthes.yml` to look like `https://your.hostname.com:4443/faye`\r\n\r\nFinally start up Thin from the project root.\r\n\r\n```\r\nthin -C config/danthes_thin.yml start\r\n```\r\n\r\n## Serving Faye with Redis engine\r\n\r\nTo serve Faye with Redis engine, you should create `config/danthes_redis.yml`\r\n\r\n```yaml\r\nproduction:\r\n  host: redis_host\r\n  port: redis_port\r\n  password: redis_password\r\n  database: redis_database\r\n  namespace: '/namespace'\r\n```\r\n\r\nNote: database and namespace are optional.\r\n\r\n## Usage\r\n\r\nUse the `subscribe_to` helper method on any page to subscribe to a channel.\r\n\r\n```rhtml\r\n<%= subscribe_to \"/messages/new\" %>\r\n```\r\n\r\nUse the `publish_to` helper method to send JavaScript to that channel. This is usually done in a JavaScript AJAX template (such as a create.js.erb file).\r\n\r\n```rhtml\r\n<% publish_to \"/messages/new\" do %>\r\n  $(\"#chat\").append(\"<%= j render(@messages) %>\");\r\n<% end %>\r\n```\r\n\r\nThis JavaScript will be immediately evaluated on all clients who have subscribed to that channel. In this example they will see the new chat message appear in real-time without reloading the browser.\r\n\r\n\r\n## Alternative Usage\r\n\r\nIf you prefer to work through JSON instead of `.js.erb` templates, you can pass a hash to `publish_to` instead of a block and it will be converted `to_json` behind the scenes. This can be done anywhere (such as the controller).\r\n\r\n```ruby\r\nDanthes.publish_to \"/messages/new\", :chat_message => \"Hello, world!\"\r\n```\r\n\r\nAnd then handle this through JavaScript on the client side.\r\n\r\n```javascript\r\nDanthes.subscribe(\"/messages/new\", function(data, channel) {\r\n  $(\"#chat\").append(data.chat_message);\r\n});\r\n```\r\n\r\nThe Ruby `subscribe_to` helper call is still necessary with this approach to grant the user access to the channel. The JavaScript is just a callback for any custom behavior.\r\n\r\n## Debugging\r\n\r\nTo enable debugging for faye connection process set `debug` to true before first `sign` call.\r\n\r\n``` javascript\r\nDanthes.debug = true\r\n```\r\n\r\n## Configuration\r\n\r\nThe configuration is set separately for each environment in the generated `config/danthes.yml` file. Here are the options.\r\n\r\n* `server`: The URL to use for the Faye server such as `http://localhost:9292/faye`.\r\n* `secret_token`: A secret hash to secure the server. Can be any string.\r\n* `signature_expiration`: The length of time in seconds before a subscription signature expires. If this is not set there is no expiration. Note: if Faye is on a separate server from the Rails app, the system clocks must be in sync for the expiration to work properly.\r\n\r\n\r\n## How It Works\r\n\r\nThe `subscribe_to` helper will output the following script which subscribes the user to a specific channel and server.\r\n\r\n```html\r\n<script type=\"text/javascript\">\r\n  Danthes.sign({\r\n    channel: \"/messages/new\",\r\n    timestamp: 1302306682972,\r\n    signature: \"dc1c71d3e959ebb6f49aa6af0c86304a0740088d\",\r\n    server: \"http://localhost:9292/faye\"\r\n  });\r\n</script>\r\n```\r\n\r\nThe signature and timestamp checked on the Faye server to ensure users are only able to access channels you subscribe them to. The signature will automatically expire after the time specified in the configuration.\r\n\r\nThe `publish_to` method will send a post request to the Faye server (using `Net::HTTP`) instructing it to send the given data back to the browser.\r\n\r\n## Development & Feedback\r\n\r\nQuestions or comments? Please use the [issue tracker](https://github.com/phenomena/danthes/issues). Tests can be run with `bundle` and `rake` commands.\r\n\r\n## TODO\r\n\r\n- Add support for faye subscribe callbacks\r\n","tagline":"Private pub/sub messaging in Rails through Faye. More Faye features supported. Based on PrivatePub"}